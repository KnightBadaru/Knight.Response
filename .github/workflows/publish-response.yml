name: publish

on:
  push:
    tags:
      - 'response-v*'
      - 'aspnetcore-v*'

permissions:
  contents: read

jobs:
  publish-response:
    if: startsWith(github.ref, 'refs/tags/response-v')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore Knight.Response.sln

      - name: Build
        run: dotnet build Knight.Response.sln -c Release --no-restore

      - name: Test
        run: dotnet test Knight.Response.sln -c Release --no-build --verbosity normal

      - name: Derive version from tag (Knight.Response)
        run: echo "PKG_VERSION=${GITHUB_REF_NAME#response-v}" >> "$GITHUB_ENV"
      
      # Sanity check - csproj version matches the tag
      - name: Check csproj version
        run: |
          csproj="src/Knight.Response/Knight.Response.csproj"
          declared=$(awk -F'[<>]' '/<Version>/{print $3; exit}' "$csproj" 2>/dev/null || true)
          echo "Declared Version=$declared; Tag Version=$PKG_VERSION"
          if [ -n "$declared" ] && [ "$declared" != "$PKG_VERSION" ]; then
            echo "::warning ::csproj version ($declared) does not match tag ($PKG_VERSION)"
          fi

      - name: Extract release notes from CHANGELOG
        shell: bash
        env:
          FILE: src/Knight.Response/CHANGELOG.md
          VER: ${{ env.PKG_VERSION }}
        run: |
          set -euo pipefail
          
          if [[ -f "$FILE" ]] && grep -qE "^## \\[\\s*${VER}\\s*\\]" "$FILE"; then
            {
              echo "RELEASE_NOTES<<EOF"
              # Print lines after '## [<ver>]' until the next '## [' (another version)
              awk -v ver="$VER" '
                $0 ~ "^## \\[\\s*" ver "\\s*\\]" { p=1; next }
                p && $0 ~ "^## \\["           { p=0 }
                p
              ' "$FILE"
              echo "EOF"
            } >> "$GITHUB_ENV"
          else
            echo "RELEASE_NOTES=See CHANGELOG.md for details." >> "$GITHUB_ENV"
          fi

      - name: Pack (Knight.Response with release notes)
        run: |
          set -euo pipefail
          # Turn multi-line RELEASE_NOTES into a single MSBuild-safe string (NuGet renders &#10; as newline)
          NOTES_ESCAPED="$(printf '%s' "${RELEASE_NOTES:-}" | tr -d '\r' | sed ':a;N;$!ba;s/\n/&#10;/g')"
          
          dotnet pack src/Knight.Response/Knight.Response.csproj \
            -c Release -o artifacts --no-build \
            /p:ContinuousIntegrationBuild=true \
            /p:PackageReleaseNotes="$NOTES_ESCAPED"

      - name: Upload package artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: response-packages
          path: artifacts/*.nupkg

      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: >
          dotnet nuget push artifacts/*.nupkg
          -k "$NUGET_API_KEY"
          -s https://api.nuget.org/v3/index.json
          --skip-duplicate
  
  publish-aspnetcore:
    if: startsWith(github.ref, 'refs/tags/aspnetcore-v')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore Knight.Response.sln

      - name: Build
        run: dotnet build Knight.Response.sln -c Release --no-restore

      - name: Test
        run: dotnet test Knight.Response.sln -c Release --no-build --verbosity normal

      - name: Derive version from tag (AspNetCore)
        run: echo "PKG_VERSION=${GITHUB_REF_NAME#aspnetcore-v}" >> "$GITHUB_ENV"
        
        # Sanity check - csproj version matches the tag
      - name: Check csproj version
        run: |
          csproj="src/Knight.Response.AspNetCore/Knight.Response.AspNetCore.csproj"
          declared=$(awk -F'[<>]' '/<Version>/{print $3; exit}' "$csproj" 2>/dev/null || true)
          echo "Declared Version=$declared; Tag Version=$PKG_VERSION"
          if [ -n "$declared" ] && [ "$declared" != "$PKG_VERSION" ]; then
            echo "::warning ::csproj version ($declared) does not match tag ($PKG_VERSION)"
          fi

      - name: Extract release notes from CHANGELOG
        shell: bash
        env:
          FILE: src/Knight.Response.AspNetCore/CHANGELOG.md
          VER:  ${{ env.PKG_VERSION }}
        run: |
          set -euo pipefail
          
          if [[ -f "$FILE" ]] && grep -qE "^## \\[\\s*${VER}\\s*\\]" "$FILE"; then
            {
              echo "RELEASE_NOTES<<EOF"
              # Print lines after '## [<ver>]' until the next '## [' (another version)
              awk -v ver="$VER" '
                $0 ~ "^## \\[\\s*" ver "\\s*\\]" { p=1; next }
                p && $0 ~ "^## \\["           { p=0 }
                p
              ' "$FILE"
              echo "EOF"
            } >> "$GITHUB_ENV"
          else
            echo "RELEASE_NOTES=See CHANGELOG.md for details." >> "$GITHUB_ENV"
          fi

      - name: Pack (Knight.Response.AspNetCore with release notes)
        run: |
          set -euo pipefail
          # Turn multi-line RELEASE_NOTES into a single MSBuild-safe string (NuGet renders &#10; as newline)
          NOTES_ESCAPED="$(printf '%s' "${RELEASE_NOTES:-}" | tr -d '\r' | sed ':a;N;$!ba;s/\n/&#10;/g')"
          
          dotnet pack src/Knight.Response.AspNetCore/Knight.Response.AspNetCore.csproj \
            -c Release -o artifacts --no-build \
            /p:ContinuousIntegrationBuild=true \
            /p:PackageReleaseNotes="$NOTES_ESCAPED"

      - name: Upload package artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aspnetcore-packages
          path: artifacts/*.nupkg

      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: >
          dotnet nuget push artifacts/*.nupkg
          -k "$NUGET_API_KEY"
          -s https://api.nuget.org/v3/index.json
          --skip-duplicate